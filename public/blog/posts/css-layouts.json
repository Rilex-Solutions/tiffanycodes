{
  "id": 2,
  "slug": "css-layouts",
  "title": "Mastering CSS Grid and Flexbox for Modern Layouts",
  "excerpt": "Deep dive into CSS Grid and Flexbox to create responsive, flexible layouts that work across all devices.",
  "date": "2024-01-10",
  "readTime": "6 min read",
  "tags": ["CSS", "Web Design", "Responsive"],
  "content": "# Mastering CSS Grid and Flexbox for Modern Layouts\n\nCSS Grid and Flexbox have revolutionized how we approach web layouts. Let's explore how to use them effectively to create responsive, maintainable designs.\n\n## Understanding the Fundamentals\n\n### Flexbox: One-Dimensional Layouts\nFlexbox excels at distributing space and aligning items in a single dimension (row or column).\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n}\n```\n\n### CSS Grid: Two-Dimensional Layouts\nGrid is perfect for complex layouts that need precise control over both rows and columns.\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n}\n```\n\n## When to Use Grid vs Flexbox\n\n### Use Flexbox For:\n- Navigation bars\n- Card layouts in a row/column\n- Centering content\n- Distributing space between items\n\n### Use Grid For:\n- Page layouts (header, sidebar, main, footer)\n- Image galleries\n- Complex card layouts\n- Any layout requiring 2D control\n\n## Practical Layout Patterns\n\n### 1. Holy Grail Layout with Grid\n```css\n.page-layout {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n}\n```\n\n### 2. Responsive Card Grid\n```css\n.card-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 1.5rem;\n}\n```\n\n### 3. Flexible Navigation\n```css\n.nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nav-links {\n  display: flex;\n  gap: 2rem;\n}\n```\n\n## Advanced Techniques\n\n### Subgrid (Where Supported)\n```css\n.card {\n  display: grid;\n  grid-template-rows: subgrid;\n  grid-row: span 3;\n}\n```\n\n### Container Queries\n```css\n@container (min-width: 400px) {\n  .card {\n    grid-template-columns: 1fr 2fr;\n  }\n}\n```\n\n## Responsive Design Principles\n\n1. **Mobile-First**: Start with mobile layout, then enhance\n2. **Flexible Units**: Use fr, %, vw/vh instead of fixed pixels\n3. **Auto-Fit vs Auto-Fill**: Choose based on desired behavior\n4. **Gap Property**: Better than margins for consistent spacing\n\n## Common Pitfalls to Avoid\n\n- Don't use Grid for simple one-dimensional layouts\n- Avoid unnecessary wrapper elements\n- Don't forget about accessibility with focus management\n- Be careful with aspect ratios on different screen sizes\n\n## Browser Support and Fallbacks\n\nBoth Grid and Flexbox have excellent modern browser support. For older browsers:\n\n```css\n/* Fallback */\n.layout {\n  display: block;\n}\n\n/* Modern browsers */\n@supports (display: grid) {\n  .layout {\n    display: grid;\n  }\n}\n```\n\n## Conclusion\n\nMastering CSS Grid and Flexbox opens up endless possibilities for creating beautiful, responsive layouts. Remember:\n\n- Use Flexbox for one-dimensional layouts\n- Use Grid for two-dimensional layouts\n- Start mobile-first\n- Embrace flexible units\n- Practice with real projects\n\nThe combination of these tools gives you everything needed to build modern, responsive web layouts without relying on frameworks."
}